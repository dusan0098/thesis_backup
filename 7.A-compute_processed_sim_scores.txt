# -------------------------------------------------------------------------------- NOTEBOOK-CELL: MARKDOWN
# ### SIMILARITY IDEAS
# 1. Try to extract KeyBERT scores and do weighted sim
# 2. Use sim with "" as baseline 
# 3. Use max_sim of topics in the same period as threshold
# 4. Forbenius/Nuclear norm - L1/L2 for matrix - Use it as scaling factor prior to Clustering (HDBSCAN)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# -*- coding: utf-8 -*-
import dataiku
import pandas as pd, numpy as np
from dataiku import pandasutils as pdu
from datetime import datetime
from utils import (
    select_gpu_with_most_free_memory,
    load_experiment_jsons,
    load_experiment_objects,
    get_current_time_and_unix_timestamp,
    get_newest_json,
    get_unique_dictionaries,
    save_combination_list,
)

# Read recipe inputs
ed_similarity_scores = dataiku.Folder("0JFzvl2d")
ed_similarity_scores_path = ed_similarity_scores.get_path()

# Write recipe outputs
ed_similarity_scores_processed = dataiku.Folder("hZfSC2LV")
ed_similarity_scores_processed_info = ed_similarity_scores_processed.get_path()

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
experiment_jsons = load_experiment_jsons(
                            root_folder_path = ed_similarity_scores_path,
                            dataset_name = "",
                            experiment_details_subfolder = "similarity_experiment_details")

# Add filters if necessary
filtered_jsons = original_experiments = [e for e in experiment_jsons if
                       (e["similarity_config"]["target_dimension"] == 10)]
len(filtered_jsons)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
device = select_gpu_with_most_free_memory()

for curr_json in filtered_jsons:
    similarity_scores = load_experiment_objects(experiment_jsons = [curr_json],
                            file_path_key = "similarity_save_location")[0]
    
    clusters_df = load_experiment_objects(experiment_jsons = [curr_json],
                            file_path_key = "clustering_save_location")[0]
    
    # Ensure 'clusters_df' has the correct column order
    primary_columns = ['topic_id', 'date', 'cluster_size']
    secondary_columns = [col for col in clusters_df.columns if col not in primary_columns]
    clusters_df = clusters_df[primary_columns + secondary_columns]

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
#pd.set_option('display.max_colwidth',3000)
clusters_df.tail(3)[["ctfidf_representation","keybert_representation"]]#.values

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
print(len(similarity_scores))
print("Unique Clusters * days:", 8073 * 480)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
similarity_scores.head(3)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: MARKDOWN
# ### Imputing values for missing dates

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
df = similarity_scores.copy()
sim_columns = [col for col in df.columns if col.startswith('max_sim_')]

# Sorting values
df.sort_values(['date', 'topic_id', 'timeline_date'], inplace=True)

# Determine full timeline
full_timeline = pd.date_range(start=df['timeline_date'].min(), end=df['timeline_date'].max(), freq='D')

# Create a multi-index with only existing combinations of topic_id, date, and the full timeline
all_combinations = pd.MultiIndex.from_tuples(
    [(topic_id, date, timeline_date) for (topic_id, date) in df[['topic_id', 'date']].drop_duplicates().itertuples(index=False)
     for timeline_date in full_timeline],
    names=['topic_id', 'date', 'timeline_date']
)

# Reindex the DataFrame to ensure all combinations are present
df.set_index(['topic_id', 'date', 'timeline_date'], inplace=True)
df = df.reindex(all_combinations)

# Interpolate missing values within each (topic_id, date) combination, ensuring correct order
def interpolate_group(group):
    group = group.sort_index()  # Ensure sorting by timeline_date within each group
    group[sim_columns] = group[sim_columns].interpolate(method='linear')
    return group

df = df.groupby(['topic_id', 'date']).apply(interpolate_group)

# Reset index to prepare for pivot
df.reset_index(inplace=True)

# Transform to wide format: create lists of scores for each (topic_id, date) combination
def aggregate_scores(group):
    return pd.Series({f'{col}_list': group[col].tolist() for col in sim_columns})

# Apply the aggregation
df_wide = df.groupby(['topic_id', 'date']).apply(aggregate_scores).reset_index()

# Sort in order of topics
df_wide.sort_values(['date', 'topic_id'], inplace=True)

# Display the wide DataFrame
pd.reset_option('display.max_colwidth') 
df_wide.head(3)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
#len(df_wide.iloc[0]["max_sim_keybert_list"])
timeline_columns = [col for col in df_wide.columns if col.endswith('_list')]
for column in timeline_columns:
    print("Column name:", column)
    print(df_wide[column].str.len().value_counts())

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: MARKDOWN
# ### BUMP DETECTION FUNCTION

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
def detect_bumps_in_series(lower_threshold, upper_threshold, timeline, smoothed_values, min_days_above_upper=7, max_bump_width=45):
    bumps = []
    in_bump = False
    bump_start_date = None
    bump_peak_date = None
    bump_peak_value = float('-inf')  # Ensure this is always a float
    first_above_upper_date = None
    bump_end_date = None
    current_trend = 'waiting'
    days_above_upper = 0

    previous_value = None
    previous_date = None

    for date, value in zip(timeline, smoothed_values):
        date = date.date()  # Ensure the date is of type datetime.date

        if current_trend == 'waiting':
            if value < lower_threshold:
                bump_start_date = date
                current_trend = 'rising'

        elif current_trend == 'rising':
            if previous_value is not None and value < previous_value:
                if bump_peak_value > upper_threshold:
                    current_trend = 'falling'
                else:
                    # Reset if we start falling before reaching the upper threshold
                    current_trend = 'waiting'
                    bump_start_date = None
                    bump_peak_date = None
                    bump_peak_value = float('-inf')  # Reset to negative infinity
                    first_above_upper_date = None
                    bump_end_date = None
                    days_above_upper = 0
            else:
                if value > upper_threshold:
                    if first_above_upper_date is None:
                        first_above_upper_date = date
                    days_above_upper += 1
                if bump_peak_value is None or value > bump_peak_value:
                    bump_peak_value = value
                    bump_peak_date = date

        elif current_trend == 'falling':
            if previous_value is not None and value > previous_value:
                # Reset if we start rising again during falling
                current_trend = 'waiting'
                bump_start_date = None
                bump_peak_date = None
                bump_peak_value = float('-inf')  # Reset to negative infinity
                first_above_upper_date = None
                bump_end_date = None
                days_above_upper = 0
            else:
                if value < lower_threshold:
                    bump_end_date = date
                    if first_above_upper_date and days_above_upper >= min_days_above_upper and (bump_end_date - bump_start_date).days <= max_bump_width:
                        bumps.append({
                            'start_date': bump_start_date,
                            'first_above_upper_date': first_above_upper_date,
                            'peak_date': bump_peak_date,
                            'peak_value': bump_peak_value,
                            'end_date': bump_end_date
                        })
                    # Reset all variables for the next potential bump
                    current_trend = 'waiting'
                    bump_start_date = None
                    bump_peak_date = None
                    bump_peak_value = float('-inf')  # Reset to negative infinity
                    first_above_upper_date = None
                    bump_end_date = None
                    days_above_upper = 0

        previous_value = value
        previous_date = date

    return bumps

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
import pandas as pd
import numpy as np
from statsmodels.nonparametric.smoothers_lowess import lowess
from joblib import Parallel, delayed
from tqdm import tqdm
from datetime import datetime, timedelta

def loess_smoothing_single(df, col, alpha):
    def smooth_row(row):
        return lowess(row, np.arange(len(row)), frac=alpha)[:, 1]

    smoothed_values = Parallel(n_jobs=-1)(
        delayed(smooth_row)(row) for row in tqdm(df[col], desc=f"Smoothing {col} with alpha {alpha}")
    )
    return pd.Series(smoothed_values, index=df.index)

def calculate_quantiles_from_smoothed(smoothed_values, quantiles):
    all_smoothed_values = np.concatenate(smoothed_values.values)
    lower_threshold = np.percentile(all_smoothed_values, quantiles[0] * 100)
    upper_threshold = np.percentile(all_smoothed_values, quantiles[1] * 100)
    assert lower_threshold < upper_threshold
    return lower_threshold, upper_threshold

def detect_bumps_in_df(df_wide, timeline_columns, alpha_values, quantiles=(0.3, 0.7), min_days_above_upper=7, max_bump_width=45):
    bump_records = []
    
    global_start_date = df_wide['date'].min()
    global_end_date = df_wide['date'].max()
    timeline = pd.date_range(start=global_start_date, end=global_end_date)

    for col in tqdm(timeline_columns, desc="Processing columns"):
        for alpha in tqdm(alpha_values, desc="Processing alphas"):
            smoothed_values = loess_smoothing_single(df_wide, col, alpha)
            lower_threshold, upper_threshold = calculate_quantiles_from_smoothed(smoothed_values, quantiles)

            for idx, row in df_wide.iterrows():
                smoothed_row_values = smoothed_values[idx]
                bumps = detect_bumps_in_series(lower_threshold, upper_threshold, timeline, \
                                               smoothed_row_values, min_days_above_upper, max_bump_width)
                has_bumps = len(bumps) > 0
                largest_bump_peak_date = None
                closest_bump_peak_date = None

                if has_bumps:
                    largest_bump = max(bumps, key=lambda x: x['peak_value'])
                    largest_bump_peak_date = largest_bump['peak_date']
                    closest_bump = min(bumps, key=lambda x: abs(x['peak_date'] - row['date']))
                    closest_bump_peak_date = closest_bump['peak_date']

                bump_records.append({
                    'topic_id': row['topic_id'],
                    'date': row['date'],
                    'similarity_column': col,
                    'alpha': alpha,
                    'has_bumps': has_bumps,
                    'largest_bump_peak_date': largest_bump_peak_date,
                    'closest_bump_peak_date': closest_bump_peak_date
                })

    bump_df = pd.DataFrame(bump_records)
    return bump_df


# Example usage
timeline_columns = [col for col in df_wide.columns if col.endswith('_list')]
timeline_columns = timeline_columns[5:7]
alpha_values = [0.02, 0.03, 0.04]#, 0.04, 0.05]

# Detect bumps with additional parameters for minimum days above upper threshold and maximum bump width
bump_df = detect_bumps_in_df(df_wide, 
                             timeline_columns, 
                             alpha_values, 
                             quantiles=(0.30, 0.70), 
                             min_days_above_upper=5, 
                             max_bump_width=45)

# Display the new DataFrame with bump information
bump_df.head(3)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
#df_wide = df_wide.merge(clusters_df, on=["topic_id","date"])
detected_df = bump_df[bump_df["has_bumps"] == True]
detected_df = detected_df.merge(clusters_df, on=["topic_id","date"])
detected_df

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# Calculate the absolute difference in days between the two date columns
detected_df['date_diff'] = (detected_df['closest_bump_peak_date'] - detected_df['date']).abs()

# Filter the dataframe to keep only rows where the date difference is within 30 days
filtered_df = detected_df[detected_df['date_diff'] <= pd.Timedelta(days=40)]

# Drop the temporary 'date_diff' column if no longer needed
filtered_df = filtered_df.drop(columns=['date_diff'])

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
filtered_df.sort_values(["date","closest_bump_peak_date"]).tail(100)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# Group by similarity_column and alpha and calculate the counts
grouped_bump_df = bump_df.groupby(['similarity_column', 'alpha']).agg(
    total_rows=pd.NamedAgg(column='has_bumps', aggfunc='size'),
    bump_detected=pd.NamedAgg(column='has_bumps', aggfunc='sum')
).reset_index()

# Calculate the detection rate
grouped_bump_df['detection_rate'] = grouped_bump_df['bump_detected'] / grouped_bump_df['total_rows']

# Display the results
print(grouped_bump_df)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: MARKDOWN
# ### FINDING DATES THAT ARE OFTEN MINIMUMS FOR SIMILARITY GRAPHS

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# from collections import Counter

# def find_lowest_dates(aggregated_df, sim_column="max_sim_keybert_representation_average_list"):
#     # Extract the global start and end dates from the DataFrame
#     global_start_date = aggregated_df['date'].min()
#     global_end_date = aggregated_df['date'].max()

#     # Generate a timeline from the global start to end date
#     timeline = pd.date_range(start=global_start_date, end=global_end_date)

#     # Dictionary to store the counts of dates appearing in the lowest 10 values
#     date_counts = Counter()

#     # Iterate through each row in the DataFrame
#     for _, row in aggregated_df.iterrows():
#         # Convert Max_Similarities list to a Series with a proper datetime index
#         cluster_timeline = pd.Series(data=row[sim_column],
#                                      index=pd.date_range(start=global_start_date,
#                                                          end=global_end_date))

#         # Reindex to the global timeline, filling missing days with NaN, then interpolate
#         cluster_timeline = cluster_timeline.reindex(timeline, method='pad')

#         # Find the dates of the 10 lowest values
#         lowest_dates = cluster_timeline.nsmallest(10).index

#         # Update the counts for these dates
#         date_counts.update(lowest_dates)

#     # Convert the Counter to a DataFrame for easier sorting and display
#     date_counts_df = pd.DataFrame.from_dict(date_counts, orient='index', columns=['count'])
#     date_counts_df.index.name = 'date'
#     date_counts_df.reset_index(inplace=True)

#     # Sort by count in descending order for better legibility
#     date_counts_df.sort_values(by='count', ascending=False, inplace=True)

#     return date_counts_df

# # Usage example
# lowest_dates_df = find_lowest_dates(aggregated_df  = df_wide, sim_column="max_sim_keybert_representation_average_list")

# # Display the sorted DataFrame
# lowest_dates_df

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
df_wide = df_wide.merge(clusters_df, on=["topic_id","date"])

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
df_wide.head(3)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
#clusters_df[clusters_df["date"]==datetime.date(2019,4,18)].ctfidf_representation.values

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
from statsmodels.nonparametric.smoothers_lowess import lowess
import datetime
import seaborn as sns
import matplotlib.pyplot as plt

def visualize_loess_smoothing(aggregated_df, N, alpha, sim_column = "max_sim_keybert_list", filter_date = datetime.date(2020, 2, 5)):    
    aLL_scores = np.array(np.concatenate(aggregated_df[sim_column]))
    q_lower = np.percentile(aLL_scores, 70) # higher makes it easier
    q_upper = np.percentile(aLL_scores, 40) # lower makes it easier

    # Extract the global start and end dates from the DataFrame
    global_start_date = aggregated_df['date'].min()
    global_end_date = aggregated_df['date'].max()

    # Generate a timeline from the global start to end date
    timeline = pd.date_range(start=global_start_date, end=global_end_date)
    
    # TESTING FILTER
    aggregated_df = aggregated_df[aggregated_df["date"] == filter_date]
    
    # Sample N random clusters
    sampled_clusters = aggregated_df.sample(n=N,replace=False)

    # Plotting
    fig, axs = plt.subplots(N, 1, figsize=(10, N * 4))

    if N == 1:
        axs = [axs]  # Make sure axs is iterable for a single plot

    for ax, (_, row) in zip(axs, sampled_clusters.iterrows()):
        # Convert Max_Similarities list to a Series with a proper datetime index
        cluster_timeline = pd.Series(data=row[sim_column],
                                     index=pd.date_range(start=global_start_date,
                                                         end=global_end_date))

        # Reindex to the global timeline, filling missing days with NaN, then interpolate
        cluster_timeline = cluster_timeline.reindex(timeline, method='pad')

        # Apply LOESS smoothing
        smoothed_values = lowess(cluster_timeline, np.arange(len(cluster_timeline)), frac=alpha)[:, 1]

        # Plot original and smoothed values
        ax.plot(timeline, cluster_timeline, label='Original', alpha=0.4)
        ax.plot(timeline, smoothed_values, label='LOESS Smoothed', color='red')
        ax.hlines(y=q_lower, xmin = timeline.min(),xmax = timeline.max(),linewidth=1, color='black')
        ax.hlines(y=q_upper, xmin = timeline.min(),xmax = timeline.max(),linewidth=1, color='black')
        ax.vlines(x = filter_date, ymin =smoothed_values.min(), ymax = smoothed_values.max(), linewidth=1, color='green')

        ax.set_title(f'{row["date"]}-{row["ctfidf_representation"][:6]}')
        ax.set_xlabel('Observation Date')
        ax.set_ylabel('Max Similarity')
        ax.legend()

    plt.tight_layout()
    plt.show()

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# DIMENSION 10 
sim_column = "max_sim_global_tfidf_representation_sentence_list"
aLL_scores = np.array(np.concatenate(df_wide[sim_column]))
q_lower = np.percentile(aLL_scores, 70)
q_upper = np.percentile(aLL_scores, 30)
print(q_lower,q_upper)

df_test = df_wide.copy()
filter_date = datetime.date(2020, 2, 14)
visualize_loess_smoothing(df_test, N=20, alpha=0.03, sim_column = sim_column, filter_date = filter_date)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: MARKDOWN
# ### VISUALISATIONS FOR THESIS

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# Visualising the disritubtion of similarity scores
import seaborn as sns
import matplotlib.pyplot as plt

def plot_global_distribution(data, column_name):
    """
    Plot the global distribution of a column's values.
    :param data: DataFrame containing the data.
    :param column_name: Name of the column to plot.
    """
    plt.figure(figsize=(10, 6))
    sns.histplot(data[column_name], kde=True)
    plt.title(f'Distribution of {column_name}')
    plt.xlabel(column_name)
    plt.ylabel('Frequency')
    plt.show()

# Example usage
#sim_column = "max_sim_keybert_representation_average_list"
#plot_global_distribution(similarity_scores, sim_column)

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# Visualising the disritubtion of similarity scores if we perform Clipping with quantiles
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def enhanced_robust_scale_scores(scores):
    """
    Scale the scores robustly using quantiles for the lower bound and fix the upper bound to 1.
    :param scores: A list or array of similarity scores.
    :return: Scaled scores as a numpy array.
    """
    q1 = np.percentile(scores, 3)#1   # 1st percentile for lower bound
    max_value = 1.0  # Fix the upper bound to 1

    # Clip scores to quantile range for lower bound only
    scores_clipped = np.clip(scores, q1, max_value)
    
    # Scale scores to 0-1 range
    scaled_scores = (scores_clipped - q1) / (max_value - q1)
    
    return scaled_scores

# Example usage
scores = np.array(similarity_scores["max_sim_keybert_representation_average"])  # Example similarity scores
#scaled_scores = enhanced_robust_scale_scores(scores)

# Plotting the scaled scores to visualize the distribution
# plt.figure(figsize=(10, 6))
# sns.histplot(scaled_scores, kde=True)
# plt.title('Distribution of Scaled Similarity Scores')
# plt.xlabel('Scaled Similarity Score')
# plt.ylabel('Frequency')
# plt.show()

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: MARKDOWN
# ### OLD CODE

# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE
# OLD CODE - HAD TO DROP UNNECESSARY COMBINATIONS
# df = similarity_scores.copy()
# # Convert date columns to datetime
# df['date'] = pd.to_datetime(df['date'])
# df['timeline_date'] = pd.to_datetime(df['timeline_date'])
# df.sort_values(['date', 'topic_id','timeline_date'],inplace = True)

# # Determine full timeline
# full_timeline = pd.date_range(start=df['timeline_date'].min(), end=df['timeline_date'].max(), freq='D')

# combinations = df[['topic_id', 'date']].value_counts().index
# # Create a multi-index with all combinations of topic_id, date, and the full timeline
# all_combinations = pd.MultiIndex.from_product(
#     [df['topic_id'].unique(), df['date'].unique(), full_timeline],
#      names=['topic_id', 'date', 'timeline_date'],
# )

# # Reindex the DataFrame to ensure all combinations are present
# df.set_index(['topic_id', 'date', 'timeline_date'], inplace=True)
# df = df.reindex(all_combinations)

# # Interpolate missing values within each (topic_id, date) combination
# df = df.groupby(['topic_id', 'date']).apply(lambda group: group.interpolate(method='linear'))

# # Removes all combinations that didn't exist in original set
# df = df.dropna(subset=['max_sim_ctfidf','max_sim_keybert'])

# # Reset index to prepare for pivot
# df.reset_index(inplace=True)

# # Transform to wide format: create lists of scores for each (topic_id, date) combination
# def aggregate_scores(group):
#     return pd.Series({
#         'max_sim_ctfidf_list': group['max_sim_ctfidf'].tolist(),
#         'max_sim_keybert_list': group['max_sim_keybert'].tolist(),
#     })

# # Apply the aggregation
# df_wide = df.groupby(['topic_id', 'date']).apply(aggregate_scores).reset_index()

# # Sort in order of topics
# df_wide.sort_values(['date', 'topic_id'],inplace = True)

# # Display the wide DataFrame
# df_wide.head()